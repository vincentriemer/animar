Index: test/animar.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/animar.spec.js	(revision 2a81c5b112a0a25b1b494433d7eef2293e992a73)
+++ test/animar.spec.js	(revision )
@@ -73,10 +73,11 @@
   });
 
   describe('#constructor()', () => {
-    it('should initialize all of the class variables', () => {
+    it('should initialize all of the class variables to expected defaults', () => {
       assert.equal(animar.ticking, false);
       assert.instanceOf(animar.elementMap, Map);
       assert.equal(animar.timescale, 1);
+      assert.equal(animar.hardwareAcceleration, true);
 
       // check defaults object
       assert.equal(animar.defaults.delay, 0);
@@ -97,7 +98,14 @@
       });
       assert.equal(animar.defaults.duration, 120);
     });
+
+    it('should set the hardwareAcceleration option if provided in options argument', () => {
+      animar = new Animar({
+        hardwareAcceleration: false
-  });
+      });
+      assert.equal(animar.hardwareAcceleration, false);
+    });
+  });
 
   describe('#add()', () => {
     let testElement, testAttributes, testOptions, expectedResult;
@@ -605,10 +613,23 @@
       sinon.assert.called(renderStub);
       sinon.assert.called(requestTickStub);
     });
+
+    it('should call the render function with the instance\'s hardwareAcceleration flag', () => {
+      stepStub.returns(true);
+      animar.hardwareAcceleration = false;
+      animar.update();
+
+      sinon.assert.calledWith(renderStub, false);
+      renderStub.reset();
+
+      animar.hardwareAcceleration = true;
+      animar.update();
+      sinon.assert.calledWith(renderStub, true);
-  });
+    });
+  });
 
   describe('#render', () => {
-    it('should call the render function on every element in elementMap', () => {
+    it('should call the render function on every element in elementMap with the hardware acceleration flag', () => {
       let renderSpy1 = sinon.spy();
       let renderSpy2 = sinon.spy();
       let testElement1 = document.getElementById('target1');
@@ -616,10 +637,18 @@
       animar.elementMap.set(testElement1, { render: renderSpy1 });
       animar.elementMap.set(testElement2, { render: renderSpy2 });
 
-      animar.render();
+      animar.render(true);
 
-      sinon.assert.calledWith(renderSpy1, testElement1);
-      sinon.assert.calledWith(renderSpy2, testElement2);
+      sinon.assert.calledWith(renderSpy1, true);
+      sinon.assert.calledWith(renderSpy2, true);
+
+      renderSpy1.reset();
+      renderSpy2.reset();
+
+      animar.render(false);
+
+      sinon.assert.calledWith(renderSpy1, false);
+      sinon.assert.calledWith(renderSpy2, false);
     });
   });
 
Index: test/element.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/element.spec.js	(revision 2a81c5b112a0a25b1b494433d7eef2293e992a73)
+++ test/element.spec.js	(revision )
@@ -36,18 +36,36 @@
       assert.isTrue(attributeRenderFunction.calledTwice);
     });
 
-    it('should append transformation strings and apply the transfrom', () => {
+    it('should append transformation strings and apply the transform, adding translateZ when hardware acceleration' +
+      'is on', () => {
       let applyStyleStub = sinon.stub(Helpers, 'applyStyle');
       let translateRenderFunction = sinon.stub().returns('translateX(10px) ');
       let scaleRenderFunction = sinon.stub().returns('scale(2) ');
       testElement.attributes.set('translateX', { render: translateRenderFunction });
       testElement.attributes.set('scale', { render: scaleRenderFunction });
 
-      testElement.render();
+      testElement.render(true);
 
       assert.isTrue(translateRenderFunction.called);
       assert.isTrue(scaleRenderFunction.called);
       assert.isTrue(applyStyleStub.calledWith(testDomElement, 'transform', 'translateX(10px) scale(2) translateZ(0)'));
+
+      applyStyleStub.restore();
+    });
+
+    it('should append transformation strings and apply the transform, not adding translateZ when hardware ' +
+      'acceleration is off', () => {
+      let applyStyleStub = sinon.stub(Helpers, 'applyStyle');
+      let translateRenderFunction = sinon.stub().returns('translateX(10px) ');
+      let scaleRenderFunction = sinon.stub().returns('scale(2) ');
+      testElement.attributes.set('translateX', { render: translateRenderFunction });
+      testElement.attributes.set('scale', { render: scaleRenderFunction });
+
+      testElement.render(false);
+
+      assert.isTrue(translateRenderFunction.called);
+      assert.isTrue(scaleRenderFunction.called);
+      assert.isTrue(applyStyleStub.calledWith(testDomElement, 'transform', 'translateX(10px) scale(2)'));
 
       applyStyleStub.restore();
     });
Index: src/animar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/animar.js	(revision 2a81c5b112a0a25b1b494433d7eef2293e992a73)
+++ src/animar.js	(revision )
@@ -251,8 +251,8 @@
   }
 
   render () {
-    this.elementMap.forEach((element, domElement) => {
-      element.render(domElement);
+    this.elementMap.forEach(element => {
+      element.render();
     });
   }
 
